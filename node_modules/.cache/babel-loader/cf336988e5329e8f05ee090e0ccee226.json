{"ast":null,"code":"import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\nimport errorsHandle from '../errors/errorsHandle';\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet newMessage = false;\n\nclass DBStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getDetail() {\n    return detail;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getUser() {\n    return JSON.parse(global.sessionStorage.getItem('user'));\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  logout() {\n    global.sessionStorage.removeItem('user');\n    global.sessionStorage.removeItem('access-token');\n    this.emitChange();\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getToken() {\n    return global.sessionStorage.getItem('access-token');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getMessage() {\n    return newMessage;\n  }\n\n  unSetMessage() {\n    newMessage = false;\n    this.emitChange();\n  }\n\n}\n\nconst store = new DBStore();\ndispatcher.register(action => {\n  console.log(action);\n\n  switch (action.type) {\n    case actionTypes.LOAD_DETAIL:\n      detail = action.data;\n      store.emitChange();\n      break;\n\n    case actionTypes.LOGIN:\n      global.sessionStorage.setItem('user', JSON.stringify(action.data.user));\n      store.emitChange();\n      break;\n\n    case actionTypes.ERROR:\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    default:\n      break;\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/store/store.js"],"names":["EventEmitter","dispatcher","actionTypes","errorsHandle","CHANGE_EVENT","detail","newMessage","DBStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getDetail","getUser","JSON","parse","global","sessionStorage","getItem","logout","removeItem","getToken","getMessage","unSetMessage","store","register","action","console","log","type","LOAD_DETAIL","data","LOGIN","setItem","stringify","user","ERROR"],"mappings":"AACA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,MAAM,GAAG,EAAb;AACA,IAAIC,UAAU,GAAG,KAAjB;;AACA,MAAMC,OAAN,SAAsBP,YAAtB,CAAmC;AAG/BQ,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AACxB,SAAKC,EAAL,CAAQN,YAAR,EAAsBK,QAAtB;AACH;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC3B,SAAKG,cAAL,CAAoBR,YAApB,EAAkCK,QAAlC;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,CAAUV,YAAV;AACH,GAb8B,CAe/B;;;AACAW,EAAAA,SAAS,GAAG;AACR,WAAOV,MAAP;AACH,GAlB8B,CAoB/B;;;AACAW,EAAAA,OAAO,GAAG;AACN,WAAOC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,MAA9B,CAAX,CAAP;AACH,GAvB8B,CAyB/B;;;AACAC,EAAAA,MAAM,GAAG;AACLH,IAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAtB,CAAiC,MAAjC;AACAJ,IAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAtB,CAAiC,cAAjC;AACA,SAAKV,UAAL;AACH,GA9B8B,CAgC/B;;;AACAW,EAAAA,QAAQ,GAAG;AACP,WAAOL,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,cAA9B,CAAP;AACH,GAnC8B,CAqC/B;;;AACAI,EAAAA,UAAU,GAAG;AACT,WAAOnB,UAAP;AACH;;AACDoB,EAAAA,YAAY,GAAG;AACXpB,IAAAA,UAAU,GAAG,KAAb;AACA,SAAKO,UAAL;AACH;;AA5C8B;;AAgDnC,MAAMc,KAAK,GAAG,IAAIpB,OAAJ,EAAd;AACAN,UAAU,CAAC2B,QAAX,CAAqBC,MAAD,IAAY;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK9B,WAAW,CAAC+B,WAAjB;AACI5B,MAAAA,MAAM,GAAGwB,MAAM,CAACK,IAAhB;AACAP,MAAAA,KAAK,CAACd,UAAN;AACA;;AACJ,SAAKX,WAAW,CAACiC,KAAjB;AACIhB,MAAAA,MAAM,CAACC,cAAP,CAAsBgB,OAAtB,CAA8B,MAA9B,EAAsCnB,IAAI,CAACoB,SAAL,CAAeR,MAAM,CAACK,IAAP,CAAYI,IAA3B,CAAtC;AACAX,MAAAA,KAAK,CAACd,UAAN;AACA;;AACJ,SAAKX,WAAW,CAACqC,KAAjB;AACIjC,MAAAA,UAAU,GAAGH,YAAY,CAAC0B,MAAM,CAACK,IAAR,CAAzB;AACAP,MAAAA,KAAK,CAACd,UAAN;AACA;;AACJ;AACI;AAdR;AAkBH,CApBD;AAsBA,eAAec,KAAf","sourcesContent":["\nimport { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\nimport errorsHandle from '../errors/errorsHandle';\n\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet newMessage = false;\nclass DBStore extends EventEmitter {\n\n\n    addChangeListener(callback) {\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback) {\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getDetail() {\n        return detail;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getUser() {\n        return JSON.parse(global.sessionStorage.getItem('user'));\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    logout() {\n        global.sessionStorage.removeItem('user');\n        global.sessionStorage.removeItem('access-token');\n        this.emitChange();\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getToken() {\n        return global.sessionStorage.getItem('access-token')\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getMessage() {\n        return newMessage;\n    }\n    unSetMessage() {\n        newMessage = false;\n        this.emitChange()\n    }\n\n}\n\nconst store = new DBStore();\ndispatcher.register((action) => {\n    console.log(action)\n    switch (action.type) {\n        case actionTypes.LOAD_DETAIL:\n            detail = action.data;\n            store.emitChange();\n            break;\n        case actionTypes.LOGIN:\n            global.sessionStorage.setItem('user', JSON.stringify(action.data.user))\n            store.emitChange();\n            break;\n        case actionTypes.ERROR:\n            newMessage = errorsHandle(action.data);\n            store.emitChange();\n            break;\n        default:\n            break;\n    }\n\n\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}