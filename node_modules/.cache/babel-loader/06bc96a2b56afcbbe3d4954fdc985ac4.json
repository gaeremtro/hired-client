{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable import/no-named-as-default-member */\n\n/* eslint-disable class-methods-use-this */\n\n/* eslint-disable lines-between-class-members */\nimport { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes'; // eslint-disable-next-line import/no-named-as-default\n\nimport errorsHandle from '../errors/errorsHandle';\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet userEntriesDetail = [];\nlet register = false;\nlet newMessage = false;\nlet comments = [];\nlet newComment = false;\n\nclass DBStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getDetail() {\n    return detail;\n  }\n\n  getUser() {\n    return JSON.parse(global.sessionStorage.getItem('user'));\n  }\n\n  setUser(user) {\n    global.sessionStorage.removeItem('user');\n    global.sessionStorage.setItem('user', JSON.stringify(user));\n  }\n\n  getEntriesDetail() {\n    return userEntriesDetail;\n  }\n\n  getOneEntry(id) {\n    const ent = detail.find(current => id === current._id);\n    return ent;\n  }\n\n  getUserComments(entry) {\n    const add = entry.entryCommentList;\n    const aff = add.reduce((acc, current) => {\n      if (comment.length === 0) {\n        const comment = comments.find(curr => curr._id === current);\n\n        if (comment) {\n          return [...acc, comment];\n        }\n      }\n\n      return acc;\n    }, []);\n    return aff;\n  }\n\n  isNewComment() {\n    if (newComment) {\n      newComment = false;\n      return true;\n    }\n\n    return false;\n  }\n\n  logout() {\n    global.sessionStorage.removeItem('user');\n    global.sessionStorage.removeItem('access-token');\n    this.emitChange();\n  }\n\n  setMessage(message) {\n    newMessage = errorsHandle({\n      error: {\n        code: 3,\n        message\n      }\n    });\n  }\n\n  getMessage() {\n    this.unSetMessage();\n    return newMessage;\n  }\n\n  unSetMessage() {\n    if (newMessage) {\n      setTimeout(() => {\n        newMessage = false;\n        this.emitChange();\n      }, 2500);\n    }\n  }\n\n  getRegister() {\n    return register;\n  }\n\n  setRegister() {\n    register = false;\n  }\n\n}\n\nconst store = new DBStore();\ndispatcher.register(action => {\n  switch (action.type) {\n    case actionTypes.LOAD_DETAIL:\n      detail = action.data;\n      store.emitChange();\n      break;\n\n    case actionTypes.LOGIN:\n      global.sessionStorage.setItem('user', JSON.stringify(action.data.user));\n      newMessage = errorsHandle({\n        error: {\n          code: 5,\n          message: action.data.message\n        }\n      });\n      store.emitChange();\n      break;\n\n    case actionTypes.REGISTER:\n      register = true;\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    case actionTypes.ERROR:\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_ENTRIES:\n      userEntriesDetail = action.data;\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_COMMENTS:\n      comments = action.data;\n      store.emitChange();\n      break;\n\n    case actionTypes.ADD_COMMENT:\n      newComment = true;\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    case actionTypes.EDIT_USER:\n    case actionTypes.ADD_ENTRY:\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    default:\n      break;\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/store/store.js"],"names":["EventEmitter","dispatcher","actionTypes","errorsHandle","CHANGE_EVENT","detail","userEntriesDetail","register","newMessage","comments","newComment","DBStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getDetail","getUser","JSON","parse","global","sessionStorage","getItem","setUser","user","removeItem","setItem","stringify","getEntriesDetail","getOneEntry","id","ent","find","current","_id","getUserComments","entry","add","entryCommentList","aff","reduce","acc","comment","length","curr","isNewComment","logout","setMessage","message","error","code","getMessage","unSetMessage","setTimeout","getRegister","setRegister","store","action","type","LOAD_DETAIL","data","LOGIN","REGISTER","ERROR","LOAD_ENTRIES","LOAD_COMMENTS","ADD_COMMENT","EDIT_USER","ADD_ENTRY"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable lines-between-class-members */\n\nimport { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\n// eslint-disable-next-line import/no-named-as-default\nimport errorsHandle from '../errors/errorsHandle';\n\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet userEntriesDetail = [];\nlet register = false;\nlet newMessage = false;\nlet comments = [];\nlet newComment = false\n\nclass DBStore extends EventEmitter {\n\n\n    addChangeListener(callback) {\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback) {\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    getDetail() {\n        return detail;\n    }\n\n    getUser() {\n        return JSON.parse(global.sessionStorage.getItem('user'));\n    }\n    setUser(user) {\n        global.sessionStorage.removeItem('user');\n        global.sessionStorage.setItem('user', JSON.stringify(user))\n    }\n\n\n\n    getEntriesDetail() {\n        return userEntriesDetail;\n    }\n    getOneEntry(id) {\n        const ent = detail.find((current) => id === current._id)\n        return ent\n    }\n    getUserComments(entry) {\n        const add = entry.entryCommentList\n\n        const aff = add.reduce((acc, current) => {\n            if (comment.length === 0) {\n                const comment = comments.find((curr) => curr._id === current)\n                if (comment) {\n                    return [...acc, comment]\n                }\n            }\n            return acc\n        }, [])\n\n        return aff\n    }\n    isNewComment() {\n        if (newComment) {\n            newComment = false;\n            return true;\n        }\n        return false;\n    }\n\n\n    logout() {\n        global.sessionStorage.removeItem('user');\n        global.sessionStorage.removeItem('access-token');\n        this.emitChange();\n    }\n    setMessage(message) {\n        newMessage = errorsHandle({ error: { code: 3, message } })\n    }\n\n    getMessage() {\n        this.unSetMessage()\n        return newMessage;\n    }\n    unSetMessage() {\n        if (newMessage) {\n\n            setTimeout(() => {\n                newMessage = false\n                this.emitChange()\n            }, 2500)\n        }\n\n    }\n    getRegister() {\n        return register\n    }\n    setRegister() {\n        register = false;\n    }\n\n}\n\nconst store = new DBStore();\ndispatcher.register((action) => {\n    switch (action.type) {\n        case actionTypes.LOAD_DETAIL:\n            detail = action.data;\n            store.emitChange();\n            break;\n        case actionTypes.LOGIN:\n            global.sessionStorage.setItem('user', JSON.stringify(action.data.user))\n            newMessage = errorsHandle({ error: { code: 5, message: action.data.message } })\n            store.emitChange();\n            break;\n        case actionTypes.REGISTER:\n            register = true;\n            newMessage = errorsHandle(action.data)\n            store.emitChange();\n            break;\n        case actionTypes.ERROR:\n            newMessage = errorsHandle(action.data);\n            store.emitChange();\n            break;\n        case actionTypes.LOAD_ENTRIES:\n            userEntriesDetail = action.data\n            store.emitChange()\n            break;\n        case actionTypes.LOAD_COMMENTS:\n            comments = action.data\n            store.emitChange();\n            break;\n        case actionTypes.ADD_COMMENT:\n            newComment = true;\n            newMessage = errorsHandle(action.data);\n            store.emitChange();\n            break;\n        case actionTypes.EDIT_USER:\n        case actionTypes.ADD_ENTRY:\n            newMessage = errorsHandle(action.data);\n            store.emitChange();\n            break;\n\n        default:\n            break;\n    }\n\n\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}