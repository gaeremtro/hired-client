{"ast":null,"code":"import axios from 'axios';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from './actionTypes';\nimport URL from './urlConfig'; // export function loadDetails() {\n//     return axios.get('http://localhost:4200/api/detail').then((detail) => {\n//         dispatcher.dispatch({\n//             type: actionTypes.LOAD_DETAIL,\n//             data: detail.data\n//         });\n//     });\n// }\n// eslint-disable-next-line import/prefer-default-export\n\nexport function loadDetails() {\n  const token = global.sessionStorage.getItem('access-token');\n  return token ? axios.get(URL.GET_ENTRIES, {\n    headers: {\n      'access-token': token\n    }\n  }).then(detailsRecives => {\n    if (detailsRecives.status === 200) {\n      dispatcher.dispatch({\n        type: actionTypes.LOAD_DETAIL,\n        data: detailsRecives.data\n      });\n    } else dispatcher.dispatch({\n      type: actionTypes.ERROR,\n      data: detailsRecives\n    });\n  }) : new Error('not Token found!');\n}\nexport function loginActions(username, password) {\n  return axios.post(URL.POST_LOGIN, {\n    username,\n    password\n  }).then(detailsRecives => {\n    if (detailsRecives.status === 200) {\n      global.sessionStorage.setItem('access-token', detailsRecives.data.token);\n      dispatcher.dispatch({\n        type: actionTypes.LOGIN,\n        data: detailsRecives.data\n      });\n    } else {\n      console.log(detailsRecives);\n      dispatcher.dispatch({\n        type: actionTypes.ERROR,\n        data: detailsRecives.data\n      });\n    }\n  });\n}\n;\nexport function isValidToken(token) {\n  return axios.post(URL.POST_VERIFICATION, {\n    headers: {\n      'access-token': token\n    }\n  }).then(detailsRecives => {\n    if (detailsRecives.status === 200) {\n      dispatcher.dispatch({\n        type: actionTypes.LOGIN,\n        data: detailsRecives.data\n      });\n    } else dispatcher.dispatch({\n      type: actionTypes.ERROR,\n      data: new Error(detailsRecives.status)\n    });\n  });\n} // }","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/actions/userActions.js"],"names":["axios","dispatcher","actionTypes","URL","loadDetails","token","global","sessionStorage","getItem","get","GET_ENTRIES","headers","then","detailsRecives","status","dispatch","type","LOAD_DETAIL","data","ERROR","Error","loginActions","username","password","post","POST_LOGIN","setItem","LOGIN","console","log","isValidToken","POST_VERIFICATION"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,WAAT,GAAuB;AAE1B,QAAMC,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,cAA9B,CAAd;AACA,SAAOH,KAAK,GACRL,KAAK,CAACS,GAAN,CAAUN,GAAG,CAACO,WAAd,EAA2B;AAAEC,IAAAA,OAAO,EAAE;AAAE,sBAAgBN;AAAlB;AAAX,GAA3B,EAAmEO,IAAnE,CAAyEC,cAAD,IAAoB;AACxF,QAAIA,cAAc,CAACC,MAAf,KAA0B,GAA9B,EAAmC;AAC/Bb,MAAAA,UAAU,CAACc,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAEd,WAAW,CAACe,WADF;AAEhBC,QAAAA,IAAI,EAAEL,cAAc,CAACK;AAFL,OAApB;AAIH,KALD,MAMKjB,UAAU,CAACc,QAAX,CAAoB;AACrBC,MAAAA,IAAI,EAAEd,WAAW,CAACiB,KADG;AAErBD,MAAAA,IAAI,EAAEL;AAFe,KAApB;AAKR,GAZD,CADQ,GAaH,IAAIO,KAAJ,CAAU,kBAAV,CAbT;AAcH;AAGD,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AAE7C,SAAOvB,KAAK,CAACwB,IAAN,CAAWrB,GAAG,CAACsB,UAAf,EAA2B;AAAEH,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA3B,EAAmDX,IAAnD,CAAyDC,cAAD,IAAoB;AAE/E,QAAIA,cAAc,CAACC,MAAf,KAA0B,GAA9B,EAAmC;AAC/BR,MAAAA,MAAM,CAACC,cAAP,CAAsBmB,OAAtB,CAA8B,cAA9B,EAA8Cb,cAAc,CAACK,IAAf,CAAoBb,KAAlE;AACAJ,MAAAA,UAAU,CAACc,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAEd,WAAW,CAACyB,KADF;AAEhBT,QAAAA,IAAI,EAAEL,cAAc,CAACK;AAFL,OAApB;AAIH,KAND,MAOK;AACDU,MAAAA,OAAO,CAACC,GAAR,CAAYhB,cAAZ;AACAZ,MAAAA,UAAU,CAACc,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAEd,WAAW,CAACiB,KADF;AAEhBD,QAAAA,IAAI,EAAEL,cAAc,CAACK;AAFL,OAApB;AAIH;AACJ,GAhBM,CAAP;AAkBH;AAAA;AAED,OAAO,SAASY,YAAT,CAAsBzB,KAAtB,EAA6B;AAChC,SAAOL,KAAK,CAACwB,IAAN,CAAWrB,GAAG,CAAC4B,iBAAf,EAAkC;AAAEpB,IAAAA,OAAO,EAAE;AAAE,sBAAgBN;AAAlB;AAAX,GAAlC,EAA0EO,IAA1E,CAAgFC,cAAD,IAAoB;AACtG,QAAIA,cAAc,CAACC,MAAf,KAA0B,GAA9B,EAAmC;AAC/Bb,MAAAA,UAAU,CAACc,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAEd,WAAW,CAACyB,KADF;AAEhBT,QAAAA,IAAI,EAAEL,cAAc,CAACK;AAFL,OAApB;AAIH,KALD,MAMKjB,UAAU,CAACc,QAAX,CAAoB;AACrBC,MAAAA,IAAI,EAAEd,WAAW,CAACiB,KADG;AAErBD,MAAAA,IAAI,EAAE,IAAIE,KAAJ,CAAUP,cAAc,CAACC,MAAzB;AAFe,KAApB;AAIR,GAXM,CAAP;AAYH,C,CACD","sourcesContent":["import axios from 'axios';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from './actionTypes';\nimport URL from './urlConfig'\n\n\n// export function loadDetails() {\n\n//     return axios.get('http://localhost:4200/api/detail').then((detail) => {\n//         dispatcher.dispatch({\n//             type: actionTypes.LOAD_DETAIL,\n//             data: detail.data\n//         });\n//     });\n// }\n\n// eslint-disable-next-line import/prefer-default-export\nexport function loadDetails() {\n\n    const token = global.sessionStorage.getItem('access-token')\n    return token ?\n        axios.get(URL.GET_ENTRIES, { headers: { 'access-token': token } }).then((detailsRecives) => {\n            if (detailsRecives.status === 200) {\n                dispatcher.dispatch({\n                    type: actionTypes.LOAD_DETAIL,\n                    data: detailsRecives.data\n                })\n            }\n            else dispatcher.dispatch({\n                type: actionTypes.ERROR,\n                data: detailsRecives\n            })\n\n        }) : new Error('not Token found!')\n}\n\n\nexport function loginActions(username, password) {\n\n    return axios.post(URL.POST_LOGIN, { username, password }).then((detailsRecives) => {\n\n        if (detailsRecives.status === 200) {\n            global.sessionStorage.setItem('access-token', detailsRecives.data.token)\n            dispatcher.dispatch({\n                type: actionTypes.LOGIN,\n                data: detailsRecives.data\n            })\n        }\n        else {\n            console.log(detailsRecives)\n            dispatcher.dispatch({\n                type: actionTypes.ERROR,\n                data: detailsRecives.data\n            })\n        }\n    })\n\n};\n\nexport function isValidToken(token) {\n    return axios.post(URL.POST_VERIFICATION, { headers: { 'access-token': token } }).then((detailsRecives) => {\n        if (detailsRecives.status === 200) {\n            dispatcher.dispatch({\n                type: actionTypes.LOGIN,\n                data: detailsRecives.data\n            })\n        }\n        else dispatcher.dispatch({\n            type: actionTypes.ERROR,\n            data: new Error(detailsRecives.status)\n        })\n    })\n}\n// }\n"]},"metadata":{},"sourceType":"module"}