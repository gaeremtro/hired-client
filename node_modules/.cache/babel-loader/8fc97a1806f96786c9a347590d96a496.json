{"ast":null,"code":"import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\nconst CHANGE_EVENT = 'change';\nlet detail = [];\n\nclass DBStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getDetail() {\n    return detail;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getUser() {\n    return global.sessionStorage.getItem('user');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  logout() {\n    global.sessionStorage.removeItem('user');\n    global.sessionStorage.removeItem('access-token');\n    this.emitChange();\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getToken() {\n    return global.sessionStorage.getItem('access-token');\n  }\n\n}\n\nconst store = new DBStore();\ndispatcher.register(action => {\n  switch (action.type) {\n    case actionTypes.LOAD_DETAIL:\n      detail = action.data;\n      console.log(action.data);\n      store.emitChange();\n      break;\n\n    case actionTypes.LOGIN:\n      global.sessionStorage.setItem('user', action.data.user);\n      store.emitChange();\n      break;\n\n    default:\n      break;\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/store/store.js"],"names":["EventEmitter","dispatcher","actionTypes","CHANGE_EVENT","detail","DBStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getDetail","getUser","global","sessionStorage","getItem","logout","removeItem","getToken","store","register","action","type","LOAD_DETAIL","data","console","log","LOGIN","setItem","user"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,MAAM,GAAG,EAAb;;AACA,MAAMC,OAAN,SAAsBL,YAAtB,CAAmC;AAG/BM,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AACxB,SAAKC,EAAL,CAAQL,YAAR,EAAsBI,QAAtB;AACH;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC3B,SAAKG,cAAL,CAAoBP,YAApB,EAAkCI,QAAlC;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,CAAUT,YAAV;AACH,GAb8B,CAe/B;;;AACAU,EAAAA,SAAS,GAAG;AACR,WAAOT,MAAP;AACH,GAlB8B,CAoB/B;;;AACAU,EAAAA,OAAO,GAAG;AACN,WAAOC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,MAA9B,CAAP;AACH,GAvB8B,CAyB/B;;;AACAC,EAAAA,MAAM,GAAG;AACLH,IAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAtB,CAAiC,MAAjC;AACAJ,IAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAtB,CAAiC,cAAjC;AACA,SAAKR,UAAL;AACH,GA9B8B,CAgC/B;;;AACAS,EAAAA,QAAQ,GAAG;AACP,WAAOL,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,cAA9B,CAAP;AACH;;AAnC8B;;AAuCnC,MAAMI,KAAK,GAAG,IAAIhB,OAAJ,EAAd;AACAJ,UAAU,CAACqB,QAAX,CAAqBC,MAAD,IAAY;AAE5B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKtB,WAAW,CAACuB,WAAjB;AACIrB,MAAAA,MAAM,GAAGmB,MAAM,CAACG,IAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACG,IAAnB;AACAL,MAAAA,KAAK,CAACV,UAAN;AACA;;AACJ,SAAKT,WAAW,CAAC2B,KAAjB;AACId,MAAAA,MAAM,CAACC,cAAP,CAAsBc,OAAtB,CAA8B,MAA9B,EAAsCP,MAAM,CAACG,IAAP,CAAYK,IAAlD;AAEAV,MAAAA,KAAK,CAACV,UAAN;AACA;;AACJ;AACI;AAZR;AAcH,CAhBD;AAkBA,eAAeU,KAAf","sourcesContent":["import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\n\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nclass DBStore extends EventEmitter {\n\n\n    addChangeListener(callback) {\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback) {\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getDetail() {\n        return detail;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getUser() {\n        return global.sessionStorage.getItem('user');\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    logout() {\n        global.sessionStorage.removeItem('user');\n        global.sessionStorage.removeItem('access-token');\n        this.emitChange();\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getToken() {\n        return global.sessionStorage.getItem('access-token')\n    }\n\n}\n\nconst store = new DBStore();\ndispatcher.register((action) => {\n\n    switch (action.type) {\n        case actionTypes.LOAD_DETAIL:\n            detail = action.data;\n            console.log(action.data)\n            store.emitChange();\n            break;\n        case actionTypes.LOGIN:\n            global.sessionStorage.setItem('user', action.data.user)\n\n            store.emitChange();\n            break;\n        default:\n            break;\n    }\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}