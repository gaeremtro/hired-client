{"ast":null,"code":"import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet user = null;\n\nclass DBStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getDetail() {\n    return detail;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getUser() {\n    return user;\n  }\n\n  logout() {\n    user = null;\n    return user;\n  }\n\n}\n\nconst store = new DBStore();\ndispatcher.register(action => {\n  switch (action.type) {\n    case actionTypes.LOAD_DETAIL:\n      detail = action.data;\n      store.emitChange();\n      break;\n\n    case actionTypes.LOGIN:\n      user = action.data;\n      store.emitChange();\n      break;\n\n    default:\n      break;\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/store/store.js"],"names":["EventEmitter","dispatcher","actionTypes","CHANGE_EVENT","detail","user","DBStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getDetail","getUser","logout","store","register","action","type","LOAD_DETAIL","data","LOGIN"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,MAAM,GAAG,EAAb;AACA,IAAIC,IAAI,GAAG,IAAX;;AACA,MAAMC,OAAN,SAAsBN,YAAtB,CAAmC;AAG/BO,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AACxB,SAAKC,EAAL,CAAQN,YAAR,EAAsBK,QAAtB;AACH;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC3B,SAAKG,cAAL,CAAoBR,YAApB,EAAkCK,QAAlC;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,CAAUV,YAAV;AACH,GAb8B,CAe/B;;;AACAW,EAAAA,SAAS,GAAG;AACR,WAAOV,MAAP;AACH,GAlB8B,CAoB/B;;;AACAW,EAAAA,OAAO,GAAG;AACN,WAAOV,IAAP;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACLX,IAAAA,IAAI,GAAG,IAAP;AACA,WAAOA,IAAP;AACH;;AA5B8B;;AAgCnC,MAAMY,KAAK,GAAG,IAAIX,OAAJ,EAAd;AACAL,UAAU,CAACiB,QAAX,CAAqBC,MAAD,IAAY;AAE5B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlB,WAAW,CAACmB,WAAjB;AACIjB,MAAAA,MAAM,GAAGe,MAAM,CAACG,IAAhB;AACAL,MAAAA,KAAK,CAACL,UAAN;AACA;;AACJ,SAAKV,WAAW,CAACqB,KAAjB;AACIlB,MAAAA,IAAI,GAAGc,MAAM,CAACG,IAAd;AACAL,MAAAA,KAAK,CAACL,UAAN;AACA;;AACJ;AACI;AAVR;AAYH,CAdD;AAgBA,eAAeK,KAAf","sourcesContent":["import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\n\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet user = null;\nclass DBStore extends EventEmitter {\n\n\n    addChangeListener(callback) {\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback) {\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getDetail() {\n        return detail;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getUser() {\n        return user;\n    }\n\n    logout() {\n        user = null;\n        return user\n    }\n\n}\n\nconst store = new DBStore();\ndispatcher.register((action) => {\n\n    switch (action.type) {\n        case actionTypes.LOAD_DETAIL:\n            detail = action.data;\n            store.emitChange();\n            break;\n        case actionTypes.LOGIN:\n            user = action.data;\n            store.emitChange();\n            break;\n        default:\n            break;\n    }\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}