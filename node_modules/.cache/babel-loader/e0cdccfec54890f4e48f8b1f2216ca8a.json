{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable import/no-named-as-default-member */\n\n/* eslint-disable class-methods-use-this */\n\n/* eslint-disable lines-between-class-members */\nimport { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes'; // eslint-disable-next-line import/no-named-as-default\n\nimport errorsHandle from '../errors/errorsHandle';\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet userEntriesDetail = [];\nlet register = false;\nlet newMessage = false;\n\nclass DBStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getDetail() {\n    return detail;\n  }\n\n  getUser() {\n    return JSON.parse(global.sessionStorage.getItem('user'));\n  }\n\n  setUser(user) {\n    global.sessionStorage.removeItem('user');\n    global.sessionStorage.setItem('user', JSON.stringify(user));\n  }\n\n  getLikes(likeId) {\n    let like = false;\n    const user = this.getUser();\n    like = user.user_fav_list.find(current => current === likeId);\n    return !!like;\n  }\n\n  getEntriesDetail() {\n    return userEntriesDetail;\n  }\n\n  getOneEntry(id) {\n    return detail.find(current => id === current._id);\n  }\n\n  getUserComments(id) {\n    return this.getOneEntry;\n  }\n\n  logout() {\n    global.sessionStorage.removeItem('user');\n    global.sessionStorage.removeItem('access-token');\n    this.emitChange();\n  }\n\n  setMessage(message) {\n    newMessage = errorsHandle({\n      error: {\n        code: 3,\n        message\n      }\n    });\n  }\n\n  getMessage() {\n    this.unSetMessage();\n    return newMessage;\n  }\n\n  unSetMessage() {\n    if (newMessage) {\n      setTimeout(() => {\n        newMessage = false;\n        this.emitChange();\n      }, 2500);\n    }\n  }\n\n  getRegister() {\n    return register;\n  }\n\n  setRegister() {\n    register = false;\n  }\n\n}\n\nconst store = new DBStore();\ndispatcher.register(action => {\n  switch (action.type) {\n    case actionTypes.LOAD_DETAIL:\n      detail = action.data;\n      store.emitChange();\n      break;\n\n    case actionTypes.LOGIN:\n      global.sessionStorage.setItem('user', JSON.stringify(action.data.user));\n      newMessage = errorsHandle({\n        error: {\n          code: 5,\n          message: action.data.message\n        }\n      });\n      store.emitChange();\n      break;\n\n    case actionTypes.REGISTER:\n      register = true;\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    case actionTypes.ERROR:\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_ENTRIES:\n      userEntriesDetail = action.data;\n      store.emitChange();\n      break;\n\n    default:\n      break;\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/store/store.js"],"names":["EventEmitter","dispatcher","actionTypes","errorsHandle","CHANGE_EVENT","detail","userEntriesDetail","register","newMessage","DBStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getDetail","getUser","JSON","parse","global","sessionStorage","getItem","setUser","user","removeItem","setItem","stringify","getLikes","likeId","like","user_fav_list","find","current","getEntriesDetail","getOneEntry","id","_id","getUserComments","logout","setMessage","message","error","code","getMessage","unSetMessage","setTimeout","getRegister","setRegister","store","action","type","LOAD_DETAIL","data","LOGIN","REGISTER","ERROR","LOAD_ENTRIES"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable lines-between-class-members */\n\nimport { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\n// eslint-disable-next-line import/no-named-as-default\nimport errorsHandle from '../errors/errorsHandle';\n\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet userEntriesDetail = [];\nlet register = false;\nlet newMessage = false;\nclass DBStore extends EventEmitter {\n\n\n    addChangeListener(callback) {\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback) {\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    getDetail() {\n        return detail;\n    }\n\n    getUser() {\n        return JSON.parse(global.sessionStorage.getItem('user'));\n    }\n    setUser(user) {\n        global.sessionStorage.removeItem('user');\n        global.sessionStorage.setItem('user', JSON.stringify(user))\n    }\n    getLikes(likeId) {\n        let like = false;\n        const user = this.getUser();\n        like = user.user_fav_list.find((current) => current === likeId)\n        return !!like\n    }\n    getEntriesDetail() {\n        return userEntriesDetail;\n    }\n    getOneEntry(id) {\n        return detail.find((current) => id === current._id)\n    }\n    getUserComments(id) {\n        return this.getOneEntry\n    }\n\n    logout() {\n        global.sessionStorage.removeItem('user');\n        global.sessionStorage.removeItem('access-token');\n        this.emitChange();\n    }\n    setMessage(message) {\n        newMessage = errorsHandle({ error: { code: 3, message } })\n    }\n\n    getMessage() {\n        this.unSetMessage()\n        return newMessage;\n    }\n    unSetMessage() {\n        if (newMessage) {\n\n            setTimeout(() => {\n                newMessage = false\n                this.emitChange()\n            }, 2500)\n        }\n\n    }\n    getRegister() {\n        return register\n    }\n    setRegister() {\n        register = false;\n    }\n\n}\n\nconst store = new DBStore();\ndispatcher.register((action) => {\n    switch (action.type) {\n        case actionTypes.LOAD_DETAIL:\n            detail = action.data;\n            store.emitChange();\n            break;\n        case actionTypes.LOGIN:\n            global.sessionStorage.setItem('user', JSON.stringify(action.data.user))\n            newMessage = errorsHandle({ error: { code: 5, message: action.data.message } })\n            store.emitChange();\n            break;\n        case actionTypes.REGISTER:\n            register = true;\n            newMessage = errorsHandle(action.data)\n            store.emitChange();\n            break;\n        case actionTypes.ERROR:\n            newMessage = errorsHandle(action.data);\n            store.emitChange();\n            break;\n        case actionTypes.LOAD_ENTRIES:\n            userEntriesDetail = action.data\n            store.emitChange()\n\n            break;\n        default:\n            break;\n    }\n\n\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}