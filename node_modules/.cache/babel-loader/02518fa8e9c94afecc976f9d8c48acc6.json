{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n\n/* eslint-disable lines-between-class-members */\nimport { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\nimport errorsHandle from '../errors/errorsHandle';\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet newMessage = false;\n\nclass DBStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getDetail() {\n    return detail;\n  }\n\n  getUser() {\n    return JSON.parse(global.sessionStorage.getItem('user'));\n  }\n\n  logout() {\n    global.sessionStorage.removeItem('user');\n    global.sessionStorage.removeItem('access-token');\n    this.emitChange();\n  }\n\n  getMessage() {\n    return newMessage;\n  }\n\n  unSetMessage() {\n    newMessage = false;\n  }\n\n}\n\nconst store = new DBStore();\ndispatcher.register(action => {\n  switch (action.type) {\n    case actionTypes.LOAD_DETAIL:\n      detail = action.data;\n      store.emitChange();\n      break;\n\n    case actionTypes.LOGIN:\n      global.sessionStorage.setItem('user', JSON.stringify(action.data.user));\n      newMessage = errorsHandle({\n        error: {\n          code: 5,\n          message: action.data.message\n        }\n      });\n      store.emitChange();\n      break;\n\n    case actionTypes.REGISTER:\n      newMessage = errorsHandle({\n        error: {\n          code: 6,\n          message: action.data.message\n        }\n      });\n      store.emitChange();\n      break;\n\n    case actionTypes.ERROR:\n      newMessage = errorsHandle(action.data);\n      store.emitChange();\n      break;\n\n    default:\n      break;\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/store/store.js"],"names":["EventEmitter","dispatcher","actionTypes","errorsHandle","CHANGE_EVENT","detail","newMessage","DBStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getDetail","getUser","JSON","parse","global","sessionStorage","getItem","logout","removeItem","getMessage","unSetMessage","store","register","action","type","LOAD_DETAIL","data","LOGIN","setItem","stringify","user","error","code","message","REGISTER","ERROR"],"mappings":"AAAA;;AACA;AAEA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,MAAM,GAAG,EAAb;AACA,IAAIC,UAAU,GAAG,KAAjB;;AACA,MAAMC,OAAN,SAAsBP,YAAtB,CAAmC;AAG/BQ,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AACxB,SAAKC,EAAL,CAAQN,YAAR,EAAsBK,QAAtB;AACH;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC3B,SAAKG,cAAL,CAAoBR,YAApB,EAAkCK,QAAlC;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,CAAUV,YAAV;AACH;;AAEDW,EAAAA,SAAS,GAAG;AACR,WAAOV,MAAP;AACH;;AACDW,EAAAA,OAAO,GAAG;AACN,WAAOC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,MAA9B,CAAX,CAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLH,IAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAtB,CAAiC,MAAjC;AACAJ,IAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAtB,CAAiC,cAAjC;AACA,SAAKV,UAAL;AACH;;AAGDW,EAAAA,UAAU,GAAG;AACT,WAAOlB,UAAP;AACH;;AACDmB,EAAAA,YAAY,GAAG;AACXnB,IAAAA,UAAU,GAAG,KAAb;AAEH;;AAnC8B;;AAuCnC,MAAMoB,KAAK,GAAG,IAAInB,OAAJ,EAAd;AACAN,UAAU,CAAC0B,QAAX,CAAqBC,MAAD,IAAY;AAC5B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK3B,WAAW,CAAC4B,WAAjB;AACIzB,MAAAA,MAAM,GAAGuB,MAAM,CAACG,IAAhB;AACAL,MAAAA,KAAK,CAACb,UAAN;AACA;;AACJ,SAAKX,WAAW,CAAC8B,KAAjB;AACIb,MAAAA,MAAM,CAACC,cAAP,CAAsBa,OAAtB,CAA8B,MAA9B,EAAsChB,IAAI,CAACiB,SAAL,CAAeN,MAAM,CAACG,IAAP,CAAYI,IAA3B,CAAtC;AACA7B,MAAAA,UAAU,GAAGH,YAAY,CAAC;AAAEiC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,OAAO,EAAEV,MAAM,CAACG,IAAP,CAAYO;AAAhC;AAAT,OAAD,CAAzB;AACAZ,MAAAA,KAAK,CAACb,UAAN;AACA;;AACJ,SAAKX,WAAW,CAACqC,QAAjB;AACIjC,MAAAA,UAAU,GAAGH,YAAY,CAAC;AAAEiC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,OAAO,EAAEV,MAAM,CAACG,IAAP,CAAYO;AAAhC;AAAT,OAAD,CAAzB;AACAZ,MAAAA,KAAK,CAACb,UAAN;AACA;;AACJ,SAAKX,WAAW,CAACsC,KAAjB;AACIlC,MAAAA,UAAU,GAAGH,YAAY,CAACyB,MAAM,CAACG,IAAR,CAAzB;AACAL,MAAAA,KAAK,CAACb,UAAN;AACA;;AACJ;AACI;AAnBR;AAuBH,CAxBD;AA0BA,eAAea,KAAf","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable lines-between-class-members */\n\nimport { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from '../actions/actionTypes';\nimport errorsHandle from '../errors/errorsHandle';\n\nconst CHANGE_EVENT = 'change';\nlet detail = [];\nlet newMessage = false;\nclass DBStore extends EventEmitter {\n\n\n    addChangeListener(callback) {\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback) {\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    getDetail() {\n        return detail;\n    }\n    getUser() {\n        return JSON.parse(global.sessionStorage.getItem('user'));\n    }\n\n    logout() {\n        global.sessionStorage.removeItem('user');\n        global.sessionStorage.removeItem('access-token');\n        this.emitChange();\n    }\n\n\n    getMessage() {\n        return newMessage;\n    }\n    unSetMessage() {\n        newMessage = false;\n\n    }\n\n}\n\nconst store = new DBStore();\ndispatcher.register((action) => {\n    switch (action.type) {\n        case actionTypes.LOAD_DETAIL:\n            detail = action.data;\n            store.emitChange();\n            break;\n        case actionTypes.LOGIN:\n            global.sessionStorage.setItem('user', JSON.stringify(action.data.user))\n            newMessage = errorsHandle({ error: { code: 5, message: action.data.message } })\n            store.emitChange();\n            break;\n        case actionTypes.REGISTER:\n            newMessage = errorsHandle({ error: { code: 6, message: action.data.message } })\n            store.emitChange();\n            break;\n        case actionTypes.ERROR:\n            newMessage = errorsHandle(action.data);\n            store.emitChange();\n            break;\n        default:\n            break;\n    }\n\n\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}