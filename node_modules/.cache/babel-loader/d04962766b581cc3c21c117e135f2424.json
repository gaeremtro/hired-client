{"ast":null,"code":"import axios from 'axios';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from './actionTypes';\nimport URL from './urlConfig'; // export function loadDetails() {\n//     return axios.get('http://localhost:4200/api/detail').then((detail) => {\n//         dispatcher.dispatch({\n//             type: actionTypes.LOAD_DETAIL,\n//             data: detail.data\n//         });\n//     });\n// }\n// eslint-disable-next-line import/prefer-default-export\n\nexport function loadDetails() {\n  return axios.get(URL.GET_ENTRIES).then(detailsRecives => {\n    if (detailsRecives.status === 200) {\n      console.log(detailsRecives);\n      dispatcher.dispatch({\n        type: actionTypes.LOAD_DETAIL,\n        data: detailsRecives.data\n      });\n    } else dispatcher.dispatch({\n      type: actionTypes.ERROR,\n      data: new Error(detailsRecives.status)\n    });\n  });\n}\nexport function loginActions(username, password) {\n  return axios.post(URL.POST_LOGIN, {\n    username,\n    password\n  }).then(detailsRecives => {\n    console.log(detailsRecives);\n\n    if (detailsRecives.status === 200) {\n      dispatcher.dispatch({\n        type: actionTypes.LOGIN,\n        data: detailsRecives.data\n      });\n    } else dispatcher.dispatch({\n      type: actionTypes.ERROR,\n      data: new Error(detailsRecives.status)\n    });\n  });\n}\n;\nexport function authToken(token) {\n  return axios.post(URL.POST_VERIFICATION, {\n    params: {\n      token\n    }\n  }).then(detailsRecives => {\n    if (detailsRecives.status === 200) {\n      dispatcher.dispatch({\n        type: actionTypes.LOGIN,\n        data: detailsRecives.data\n      });\n    } else dispatcher.dispatch({\n      type: actionTypes.ERROR,\n      data: new Error(detailsRecives.status)\n    });\n  });\n} // }","map":{"version":3,"sources":["/Users/gabrielpenalva/Documents/Skylab Hired/gabriel-penalva-skylab-hired/Client/skylab-hired/src/actions/userActions.js"],"names":["axios","dispatcher","actionTypes","URL","loadDetails","get","GET_ENTRIES","then","detailsRecives","status","console","log","dispatch","type","LOAD_DETAIL","data","ERROR","Error","loginActions","username","password","post","POST_LOGIN","LOGIN","authToken","token","POST_VERIFICATION","params"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,WAAT,GAAuB;AAC1B,SAAOJ,KAAK,CAACK,GAAN,CAAUF,GAAG,CAACG,WAAd,EAA2BC,IAA3B,CAAiCC,cAAD,IAAoB;AACvD,QAAIA,cAAc,CAACC,MAAf,KAA0B,GAA9B,EAAmC;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACAP,MAAAA,UAAU,CAACW,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAEX,WAAW,CAACY,WADF;AAEhBC,QAAAA,IAAI,EAAEP,cAAc,CAACO;AAFL,OAApB;AAIH,KAND,MAOKd,UAAU,CAACW,QAAX,CAAoB;AACrBC,MAAAA,IAAI,EAAEX,WAAW,CAACc,KADG;AAErBD,MAAAA,IAAI,EAAE,IAAIE,KAAJ,CAAUT,cAAc,CAACC,MAAzB;AAFe,KAApB;AAKR,GAbM,CAAP;AAcH;AAGD,OAAO,SAASS,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AAE7C,SAAOpB,KAAK,CAACqB,IAAN,CAAWlB,GAAG,CAACmB,UAAf,EAA2B;AAAEH,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA3B,EAAmDb,IAAnD,CAAyDC,cAAD,IAAoB;AAC/EE,IAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;;AACA,QAAIA,cAAc,CAACC,MAAf,KAA0B,GAA9B,EAAmC;AAC/BR,MAAAA,UAAU,CAACW,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAEX,WAAW,CAACqB,KADF;AAEhBR,QAAAA,IAAI,EAAEP,cAAc,CAACO;AAFL,OAApB;AAIH,KALD,MAMKd,UAAU,CAACW,QAAX,CAAoB;AACrBC,MAAAA,IAAI,EAAEX,WAAW,CAACc,KADG;AAErBD,MAAAA,IAAI,EAAE,IAAIE,KAAJ,CAAUT,cAAc,CAACC,MAAzB;AAFe,KAApB;AAIR,GAZM,CAAP;AAcH;AAAA;AAED,OAAO,SAASe,SAAT,CAAmBC,KAAnB,EAA0B;AAC7B,SAAOzB,KAAK,CAACqB,IAAN,CAAWlB,GAAG,CAACuB,iBAAf,EAAkC;AAAEC,IAAAA,MAAM,EAAE;AAAEF,MAAAA;AAAF;AAAV,GAAlC,EAAyDlB,IAAzD,CAA+DC,cAAD,IAAoB;AACrF,QAAIA,cAAc,CAACC,MAAf,KAA0B,GAA9B,EAAmC;AAC/BR,MAAAA,UAAU,CAACW,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAEX,WAAW,CAACqB,KADF;AAEhBR,QAAAA,IAAI,EAAEP,cAAc,CAACO;AAFL,OAApB;AAIH,KALD,MAMKd,UAAU,CAACW,QAAX,CAAoB;AACrBC,MAAAA,IAAI,EAAEX,WAAW,CAACc,KADG;AAErBD,MAAAA,IAAI,EAAE,IAAIE,KAAJ,CAAUT,cAAc,CAACC,MAAzB;AAFe,KAApB;AAIR,GAXM,CAAP;AAYH,C,CACD","sourcesContent":["import axios from 'axios';\nimport dispatcher from '../dispatcher/app.dispatcher';\nimport actionTypes from './actionTypes';\nimport URL from './urlConfig'\n\n\n// export function loadDetails() {\n\n//     return axios.get('http://localhost:4200/api/detail').then((detail) => {\n//         dispatcher.dispatch({\n//             type: actionTypes.LOAD_DETAIL,\n//             data: detail.data\n//         });\n//     });\n// }\n\n// eslint-disable-next-line import/prefer-default-export\nexport function loadDetails() {\n    return axios.get(URL.GET_ENTRIES).then((detailsRecives) => {\n        if (detailsRecives.status === 200) {\n            console.log(detailsRecives)\n            dispatcher.dispatch({\n                type: actionTypes.LOAD_DETAIL,\n                data: detailsRecives.data\n            })\n        }\n        else dispatcher.dispatch({\n            type: actionTypes.ERROR,\n            data: new Error(detailsRecives.status)\n        })\n\n    });\n}\n\n\nexport function loginActions(username, password) {\n\n    return axios.post(URL.POST_LOGIN, { username, password }).then((detailsRecives) => {\n        console.log(detailsRecives)\n        if (detailsRecives.status === 200) {\n            dispatcher.dispatch({\n                type: actionTypes.LOGIN,\n                data: detailsRecives.data\n            })\n        }\n        else dispatcher.dispatch({\n            type: actionTypes.ERROR,\n            data: new Error(detailsRecives.status)\n        })\n    })\n\n};\n\nexport function authToken(token) {\n    return axios.post(URL.POST_VERIFICATION, { params: { token } }).then((detailsRecives) => {\n        if (detailsRecives.status === 200) {\n            dispatcher.dispatch({\n                type: actionTypes.LOGIN,\n                data: detailsRecives.data\n            })\n        }\n        else dispatcher.dispatch({\n            type: actionTypes.ERROR,\n            data: new Error(detailsRecives.status)\n        })\n    })\n}\n// }\n"]},"metadata":{},"sourceType":"module"}